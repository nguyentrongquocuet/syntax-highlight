@top Program { expression* }

expression {
  ConDec { ConDec1 | ConDec2 } |
  GivenExpression |
  DecContent |
  BinaryCompare
}

@precedence { binary @left }

commaSep<content> { "" | content ("," content)* }

newLineStep<content> { "" | content (NewLine content)* }

GivenExpression { Given space commaSep<Identifier space*>}

Given { @specialize<Identifier, "given"> }

StartDec { @specialize<Identifier, "when"> }

EndDec { @specialize<Identifier, "end"> }

BinaryCompare { @specialize<Identifier, "and" | "or" | "not" | "is">}

DecContent { Word space BinaryCompare space Word }

ConDec1 { StartDec NewLine+ EndDec }

ConDec2 { StartDec  newLineStep<DecContent>  EndDec }

@tokens {
  Word { $[a-zA-Z_\-0-9]+ }

  Identifier { Word  }

  space { $[ \n\r\t] }

  NewLine { "\n" }

  @precedence { NewLine, space }
  @precedence { Identifier, Word }
}
